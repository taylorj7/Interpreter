; top-level-eval evaluates a form in the global environment

(define top-level-eval
  (lambda (form)
    ; later we may add things that are not expressions.
    (eval-exp form init-env)))

; eval-exp is the main component of the interpreter

(define eval-exp
  (lambda (exp env)
    (cases expression exp
      [lit-exp (datum) datum]
      [var-exp (id)
        (apply-env env id; look up its value.
		   (lambda (x) x) ; procedure to call if id is in the environment 
		   (lambda () 
		     (apply-env init-env id
				(lambda (x) x)
				(lambda () (eopl:error 'apply-env ; procedure to call if id not in env
						       "variable not found in environment: ~s"
						       id)))))] 
      [app-exp (rator rands)
        (let ([proc-value (eval-exp rator env)]
              [args (eval-rands rands env)])
          (apply-proc proc-value args))]
      [if-exp (condition if-then if-else)
	(if (eval-exp condition env)
	    (eval-exp if-then env)
	    (eval-exp if-else env))]
      [if-true-exp (condition if-then)
        (if (eval-exp condition env)
	    (eval-exp if-then env))]
      [let-exp (vars exprs bodies)
	(let ([new-env (extend-env vars
				   (eval-rands exprs env)
				   env)])
	  (eval-multiple-bodies bodies new-env))]
      [lambda-const-args-exp (vars bodies)
        (closure-const-args vars bodies env)]
      [lambda-const-var-args-exp (const-id var-id bodies)
        (closure-const-var-args const-id var-id bodies env)]
      [lambda-var-args-exp (id bodies)
	(closure-var-args id bodies env)]
      [else (eopl:error 'eval-exp "Bad abstract syntax: ~a" exp)])))

; evaluate the list of operands, putting results into a list

(define eval-rands
  (lambda (rands env)
    (map (lambda (expr) (eval-exp expr env)) rands)))

; evaluate multiple bodies
(define eval-multiple-bodies
  (lambda (bodies env)
    (if (null? (cdr bodies))
	(eval-exp (car bodies) env)
	(begin
	  (eval-exp (car bodies) env)
	  (eval-multiple-bodies (cdr bodies) env)))))

;  Apply a procedure to its arguments.
;  At this point, we only have primitive procedures.  
;  User-defined procedures will be added later.

(define apply-proc
  (lambda (proc-value args)
    (cases proc-val proc-value
      [prim-proc (op) (apply-prim-proc op args)]
      [closure-const-args (vars bodies env)
	(let ([extended-env (extended-env-record vars args env)])
	  (eval-multiple-bodies bodies extended-env))]
      [closure-const-var-args (const-args var-args bodies env)
	(let ([extended-env (extended-env-record (append const-args (list var-args))
						 (get-x args (length const-args))
						 env)])
	  (eval-multiple-bodies bodies extended-env))]
      [closure-var-args (var bodies env)
	(let ([extended-env (extended-env-record (list var) (list args) env)])
	  (eval-multiple-bodies bodies extended-env))]
      [else (error 'apply-proc
                   "Attempt to apply bad procedure: ~s" 
                    proc-value)])))

(define get-x
  (lambda (ls len)
    (if (= 0 len)
	(list ls)
	(append (list (car ls)) (get-x (cdr ls) (sub1 len))))))

(define *prim-proc-names* '(+ - * / add1 sub1 zero? not = < <= > >= cons car cdr caar cadr cdar cddr caaar caadr cadar caddr cdaar cdadr cddar cdddr list assq null? eq? equal? atom? length list->vector list? pair? procedure? vector->list vector make-vector vector-ref vector? number? symbol? set-car! set-cdr! vector-set! display newline))

(define init-env         ; for now, our initial global environment only contains 
  (extend-env            ; procedure names.  Recall that an environment associates
     *prim-proc-names*   ;  a value (not an expression) with an identifier.
     (map prim-proc      
          *prim-proc-names*)
     (empty-env)))

; Usually an interpreter must define each 
; built-in procedure individually.  We are "cheating" a little bit.

(define apply-prim-proc
  (lambda (prim-proc args)
    (case prim-proc
      [(+) (apply + args)]
      [(-) (apply - args)]
      [(*) (apply * args)]
      [(/) (apply / args)]
      [(add1) (cond
	       [(or (null? args) (not (null? (cdr args)))) (eopl:error 'add1 "incorrect argument count in call (~s ~s)" prim-proc args)]
	       [else (+ (1st args) 1)])]
      [(sub1) (cond
	       [(or (null? args) (not (null? (cdr args)))) (eopl:error 'sub1 "incorrect argument count in call (~s ~s)" prim-proc args)]
	       [else (- (1st args) 1)])]
      [(zero?) (cond
	       [(or (null? args) (not (null? (cdr args)))) (eopl:error 'zero? "incorrect argument count in call (~s ~s)" prim-proc args)]
	       [else (zero? (1st args))])]
      [(not) (cond
	       [(or (null? args) (not (null? (cdr args)))) (eopl:error 'not "incorrect argument count in call (~s ~s)" prim-proc args)]
	       [else (not (1st args))])]
      [(=) (cond
	    [(null? args) (eopl:error '= "incorrect argument count in call (~s)" prim-proc)]
	    [else (apply = args)])]
      [(<) (cond
	    [(null? args) (eopl:error '< "incorrect argument count in call (~s)" prim-proc)]
	    [else (apply < args)])]
      [(<=) (cond
	    [(null? args) (eopl:error '<= "incorrect argument count in call (~s)" prim-proc)]
	    [else (apply <= args)])]
      [(>) (cond
	    [(null? args) (eopl:error '> "incorrect argument count in call (~s)" prim-proc)]
	    [else (apply > args)])]
      [(>=) (cond
	    [(null? args) (eopl:error '>= "incorrect argument count in call (~s)" prim-proc)]
	    [else (apply >= args)])]
      [(cons) (cond
	       [(or (null? args) (null? (cdr args)) (not (null? (cddr args)))) (eopl:error 'cons "incorrect argument count in call (~s ~s)" prim-proc args)]
	       [else (cons (1st args) (2nd args))])]
      [(car) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'car "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (car (1st args))])]
      [(cdr) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cdr "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cdr (1st args))])]
	  [(caar) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'caar "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (caar (1st args))])]
      [(cdar) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cdar "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cdar (1st args))])]
	  [(cadr) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cadr "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cadr (1st args))])]
      [(cddr) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cddr "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cddr (1st args))])]
	  [(caaar) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'caaar "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (caaar (1st args))])]
      [(caadr) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'caadr "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (caadr (1st args))])]
	  [(cadar) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cadar "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cadar (1st args))])]
      [(caddr) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'caddr "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cdaar (1st args))])]
	  [(cdaar) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cdaar "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (caddr (1st args))])]
      [(cdadr) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cdadr "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cdadr (1st args))])]
	  [(cddar) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cddar "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cddar (1st args))])]
      [(cdddr) (cond
	      [(or (null? args) (not (null? (cdr args)))) (eopl:error 'cdddr "incorrect argument count in call (~s ~s)" prim-proc args)]
	      [else (cdddr (1st args))])]
	  [(list) (apply list args)]
	  [(assq) (cond
		  [(or (null? args) (null? (cadr args)) (not (null? (cddr args)))) (eopl:error 'assq "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (assq (car args) (cadr args))])]
	  [(null?) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'null? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (null? (car args))])]
	  [(eq?) (cond
		  [(or (null? args) (null? (cadr args)) (not (null? (cddr args)))) (eopl:error 'eq? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (eq? (car args) (cadr args))])]
	  [(equal?) (cond
		  [(or (null? args) (null? (cadr args)) (not (null? (cddr args)))) (eopl:error 'equal? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (equal? (car args) (cadr args))])]
	  [(atom?) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'atom? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (atom? (car args))])]
	  [(length) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'length "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (length (car args))])]
	  [(list->vector) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'list->vector "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (list->vector (car args))])]
	  [(list?) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'list? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (list? (car args))])]
	  [(pair?) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'pair? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (pair? (car args))])]
	  [(procedure?) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'procedure? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (procedure-test? (car args))])]
	  [(vector->list) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'vector->list "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (vector->list (car args))])]
	  [(vector) (apply vector args)]
	  [(make-vector) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'make-vector "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (make-vector (car args))])]
	  [(newline) (cond
		  [(not (null? args)) (eopl:error 'newline "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (newline)])]
	  [(display) (cond
		  [(or (not (null? (cdr args))) (not (null? args))) (eopl:error 'display "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (display (car args))])]
	  [(vector?) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'vector? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (vector? (car args))])]
	  [(symbol?) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'number? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (symbol? (car args))])]
	  [(number?) (cond
		  [(or (null? args) (not (null? (cdr args)))) (eopl:error 'symbol? "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (number? (car args))])]
	  [(vector-ref) (cond
		  [(or (null? args) (not (null? (cddr args))) (null? (cdr args))) (eopl:error 'vector-ref "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (vector-ref (car args) (cadr args))])]
	  [(set-car!) (cond
		  [(or (null? args) (not (null? (cddr args))) (null? (cdr args))) (eopl:error 'set-car! "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (set-car! (car args) (cadr args))])]
	  [(set-cdr!) (cond
		  [(or (null? args) (not (null? (cddr args))) (null? (cdr args))) (eopl:error 'set-cdr! "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (set-cdr! (car args) (cadr args))])]
	  [(vector-set!) (cond
		  [(or (null? args) (not (null? (cdddr args))) (null? (cdr args))) (eopl:error 'vector-set! "incorrect argument count in call (~s ~s)" prim-proc args)]
		  [else (vector-set! (car args) (cadr args) (caddr args))])]
      [else (error 'apply-prim-proc 
            "Bad primitive procedure name: ~s" 
            prim-op)])))
(define procedure-test?
	(lambda (x)
		(if (not (member *prim-proc-names*))
			#f
			#t)))

(define rep      ; "read-eval-print" loop.
  (lambda ()
    (display "--> ")
    ;; notice that we don't save changes to the environment...
    (let ([line (read)])
      (if (not (equal? line '(exit)))
	  (let ([answer (top-level-eval (parse-exp line))])
	    ;; TODO: are there answers that should display differently?
	    (eopl:pretty-print (elim-closures answer)) ;;(newline)
	    (rep))))))  ; tail-recursive, so stack doesn't grow.

(define elim-closures
  (lambda (answer)
    (cond
     [(proc-val? answer) '<interpreter-procedure>]
     [(pair? answer) (cons (elim-closures (car answer)) (elim-closures (cdr answer)))]
     [else answer])))

(define eval-one-exp
  (lambda (x) (elim-closures (top-level-eval (parse-exp x)))))










